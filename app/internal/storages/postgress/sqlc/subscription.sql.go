// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscription (id, confirmation_code, status, frequency, email, city, sended_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW())
`

type CreateSubscriptionParams struct {
	ID        uuid.UUID `db:"id"`
	Code      uuid.UUID `db:"code"`
	Status    string    `db:"status"`
	Frequency string    `db:"frequency"`
	Email     string    `db:"email"`
	City      string    `db:"city"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription,
		arg.ID,
		arg.Code,
		arg.Status,
		arg.Frequency,
		arg.Email,
		arg.City,
	)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscription
WHERE confirmation_code = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, code uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubscription, code)
	return err
}

const getSubscriptionByID = `-- name: GetSubscriptionByID :one
SELECT id, confirmation_code, status, frequency, email, city, sended_at FROM subscription
WHERE id = $1
`

func (q *Queries) GetSubscriptionByID(ctx context.Context, id uuid.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByID, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ConfirmationCode,
		&i.Status,
		&i.Frequency,
		&i.Email,
		&i.City,
		&i.SendedAt,
	)
	return i, err
}

const getWaitingsNotification = `-- name: GetWaitingsNotification :many
SELECT id FROM subscription
WHERE status = 'ACTIVE'
  AND (
    (frequency = 'hourly' AND (sended_at IS NULL OR sended_at < NOW() - INTERVAL '1 hour')) OR
    (frequency = 'daily'  AND (sended_at IS NULL OR sended_at < NOW() - INTERVAL '1 day'))
  )
`

func (q *Queries) GetWaitingsNotification(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getWaitingsNotification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSendedNow = `-- name: SetSendedNow :exec
UPDATE subscription
SET sended_at = NOW()
WHERE id = $1
`

func (q *Queries) SetSendedNow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, setSendedNow, id)
	return err
}

const updateSubscriptionStatusByCode = `-- name: UpdateSubscriptionStatusByCode :exec
UPDATE subscription
SET status = $1,
    confirmation_code = NULL,
    valid_til = NULL
WHERE confirmation_code = $2
RETURNING id
`

func (q *Queries) UpdateSubscriptionStatusByCode(ctx context.Context, status string, confirmationCode uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateSubscriptionStatusByCode, status, confirmationCode)
	return err
}
